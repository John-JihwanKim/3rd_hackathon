#ifndef UART_H
#define UART_H

typedef enum 
{
   eBLE_TX_STX = 0,
   eBLE_TX_UARTLENGTH,
   eBLE_TX_RESPONSE,
   eBLE_TX_UISTATUS_SYSTEM,
   eBLE_TX_INDUCTIONLEVEL,//(0 ~ 10)
   eBLE_TX_ACLOADS,
   eBLE_TX_HEIGHT_UPPERHEATER,//(1 ~ 5)
   eBLE_TX_WEIGHT0,
   eBLE_TX_WEIGHT1,
   eBLE_TX_POT_TEMPERATURE0,
   eBLE_TX_POT_TEMPERATURE1,
   eBLE_TX_FOOD_TEMPERATURE0,
   eBLE_TX_FOOD_TEMPERATURE1,
   eBLE_TX_HEIGHT_FROMSENSOR_TOTARGET,
   eBLE_TX_REMAINED_TIME0,
   eBLE_TX_REMAINED_TIME1,
   eBLE_TX_DETECTED_FOOD_LR,// detect food, left rear
   eBLE_TX_DETECTED_FOOD_RR,// detect food, right rear
   eBLE_TX_DETECTED_FOOD_LF,// detect food, left front
   eBLE_TX_DETECTED_FOOD_RF,// detect food, right front
   eBLE_TX_NUMBER_OF_STEPS_CURRENT_COOKING,// Current cooking status
   eBLE_TX_MAX_STEPS_CURRENT_COOKING,
   eBLE_TX_WHATS_THE_RECIPE_INDEX_CURRENT_COOKING,// notice to app
   eBLE_TX_CRC0,
   eBLE_TX_CRC1,
   eBLE_TX_ETX   
} eUART_TX_TO_BLE;
#define TXUART_LENGTH_TO_BLE eBLE_TX_ETX

typedef enum 
{
   eBLE_RX_STX = 0,
   eBLE_RX_UARTLENGTH,
   eBLE_RX_CONNECTION_STATUS,
   eBLE_RX_UISTATUS_SYSTEM,
   eBLE_RX_INDUCTIONLEVEL,//(0 ~ 10)
   eBLE_RX_ACLOADS,
   eBLE_RX_HEIGHT_UPPERHEATER,//(1 ~ 5)
   eBLE_RX_REQUEST_COOKING_TIME0,
   eBLE_RX_REQUEST_COOKING_TIME1,
   eBLE_RX_NUMBER_OF_STEPS_FOR_USERCOOKING, // Current cooking status
   eBLE_RX_MAX_STEPS_FOR_USERCOOKING,
   eBLE_RX_WHATS_THE_RECIPE_INDEX_FOR_USERCOOKING, // notice to app
   eBLE_RX_CRC0,
   eBLE_RX_CRC1,
   eBLE_RX_ETX 
} eUART_RX_FROM_BLE;
#define RXUART_LENGTH_FROM_BLE eBLE_RX_ETX

#define UART_PORT_RX_FOR_BLE 14
#define UART_PORT_TX_FOR_BLE 15

void SendDataToBLEFrequently(void);
void InitUARTForBLE(void);

#endif
